// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/creditcard?schema=public"

}

enum ReminderStatus {
  Pending
  Sent
  Dismissed
}

enum BankName {
  Barclays
  Lloyds
  Monzo
  CapitalOne
}

enum CardType {
  MasterCard
  Visa
  Discover
  AmericanExpress
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  cards     Card[]
  reminders Reminder[]
  payments  Payment[]
  createdAt DateTime   @default(now())
}

model UserInfo {
  id                 Int   @id @default(autoincrement())
  email              String
  password           String
  firstname          String
  lastname           String
  mobilenumber       Int
}

model Card {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Core details
  bankName          String?
  cardType          String?          // e.g., credit/debit
  cardNetwork       String?          // e.g., VISA, Mastercard
  cardName          String?          // display_name from TrueLayer
  nameOnCard        String?          // name_on_card
  maskedNumber      String?          // masked/stored card number
  lastFour          String?          // partial_card_number

  // Validity
  validFrom         DateTime?
  validTo           DateTime?

  // Financial data
  currency          String? 
  creditLimit       Float? 
  balance           Float?           // current balance
  availableBalance  Float? 
  lastStatementBal  Float?
  lastStatementDate DateTime?

  // Payments
  dueAmount         Float?
  dueDate           DateTime?

  // Provider
  providerId        String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}


model Reminder {
  id        String          @id @default(uuid())
  message   String
  dueDate   DateTime
  status    ReminderStatus
  cardId    String
  card      Card            @relation(fields: [cardId], references: [id])
  userId    Int
  user      User            @relation(fields: [userId], references: [id])
}

model Payment {
  id        String     @id @default(uuid())
  amount    Float
  status    String     // pending, success, failed
  cardBank  BankName
  idempotencyKey String
  redirectUrl String
  currency  String
  cardId    String
  card      Card       @relation(fields: [cardId], references: [id])
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
}