// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/creditcard?schema=public"

}

enum ReminderStatus {
  Pending
  Sent
  Dismissed
}

enum BankName {
  Barclays
  Lloyds
  Monzo
  CapitalOne
}

enum CardType {
  MasterCard
  Visa
  Discover
  AmericanExpress
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String
  accessToken String
  refreshToken  String
  tokenexpiry   DateTime
  cards     Card[]
  reminders Reminder[]
  payments  Payment[]
  createdAt DateTime   @default(now())
}

model UserInfo {
  id                 Int   @id @default(autoincrement())
  email              String
  password           String
  firstname          String
  lastname           String
  mobilenumber       Int
}

model Card {
  id           String   @id @default(cuid())
  userId       String
  bankName     String?
  cardType     String?
  cardNetwork  String?
  displayName  String?
  nameOnCard   String?
  maskedNumber String?   // fully masked (**** **** **** 1234)
  lastFour     String?   // last 4 digits for quick lookup
  providerId   String?   // TrueLayer provider id
  accountId    String?   // TrueLayer account/card id
  validFrom    DateTime?
  validTo      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}



model Reminder {
  id        String          @id @default(uuid())
  message   String
  dueDate   DateTime
  status    ReminderStatus
  cardId    String
  card      Card            @relation(fields: [cardId], references: [id])
  userId    Int
  user      User            @relation(fields: [userId], references: [id])
}

model Payment {
  id        String     @id @default(uuid())
  amount    Float
  status    String     // pending, success, failed
  cardBank  BankName
  idempotencyKey String
  redirectUrl String
  currency  String
  cardId    String
  card      Card       @relation(fields: [cardId], references: [id])
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
}