// This is your Prisma schema file
// Learn more at: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@localhost:5432/creditcard?schema=public"
}

//
// ---------- ENUMS ----------
//
enum ReminderStatus {
  Pending
  Sent
  Dismissed
}

enum BankName {
  Barclays
  Lloyds
  Monzo
  CapitalOne
}

enum CardType {
  MasterCard
  Visa
  Discover
  AmericanExpress
}

//
// ---------- MODELS ----------
//

model User {
  id            Int        @id @default(autoincrement())
  email         String     @unique
  password      String
  accessToken   String
  refreshToken  String
  tokenexpiry   DateTime
  cards         Card[]
  reminders     Reminder[]
  payments      Payment[]
  createdAt     DateTime   @default(now())
}

model UserInfo {
  id            Int    @id @default(autoincrement())
  email         String
  password      String
  firstname     String
  lastname      String
  mobilenumber  String   // changed from Int → String (to handle leading 0s, country codes)
}

model Card {
  id                  String     @id @default(cuid())
  userId              Int        // changed from String → Int to match User.id
  user                User       @relation(fields: [userId], references: [id])
  bankName            BankName?
  cardType            CardType?
  cardNetwork         String?
  displayName         String?
  nameOnCard          String?
  maskedNumber        String?   // **** **** **** 1234
  lastFour            String?   // quick lookup
  providerId          String?   // TrueLayer provider id
  accountId           String?   // TrueLayer account/card id
  creditLimit         Float?
  availableBalance    Float?
  lastStatementBalance Float?
  lastStatementDate   DateTime?
  dueAmount           Float?
  dueDate             DateTime?
  validFrom           DateTime?
  validTo             DateTime?
  paymentDueDate      DateTime?
  reminders           Reminder[]
  payments            Payment[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Reminder {
  id           String          @id @default(uuid())
  message      String
  dueDate      DateTime
  reminderDate DateTime        // when reminder should trigger
  notifyVia    String[]        // ["email", "sms"]
  sent         Boolean         @default(false)
  status       ReminderStatus
  cardId       String
  card         Card            @relation(fields: [cardId], references: [id])
  userId       Int
  user         User            @relation(fields: [userId], references: [id])
}

model Payment {
  id             String     @id @default(uuid())
  amount         Float
  status         String     // pending, success, failed
  cardBank       BankName
  idempotencyKey String
  redirectUrl    String
  currency       String
  cardId         String
  card           Card       @relation(fields: [cardId], references: [id])
  userId         Int
  user           User       @relation(fields: [userId], references: [id])
  createdAt      DateTime   @default(now())
}
